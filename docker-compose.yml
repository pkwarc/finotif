
x-python-env: &pythonEnv
  DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:-Set Django secret key}
  TARGET_ENV: ${TARGET_ENV:?Set Target Environment}
  APP_PORT: ${APP_PORT:-8080}
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_NAME: ${POSTGRES_NAME:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  POSTGRES_HOST: postgres
  POSTGRES_PORT: ${POSTGRES_PORT:-5432}
  EMAIL_USER: ${EMAIL_USER:-user}
  EMAIL_PASSWORD: ${EMAIL_PASSWORD:-user}
  EMAIL_HOST: ${EMAIL_HOST:-user@ad.com}
  EMAIL_PORT: ${EMAIL_PORT:-587}
  BROKER_HOST: redis
  BROKER_PORT: ${BROKER_PORT:-6379}

services:
  postgres:
    image: postgres:${POSTGRES_TAG:-latest}
    ports:
      - "${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_NAME:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    restart: unless-stopped
  redis:
    image: redis:${BROKER_TAG:-latest}
    expose:
      - "${BROKER_PORT:-6379}"
    restart: unless-stopped
  app:
    image: pkwarc/finotif-python-${TARGET_ENV:-Target Environment}
    build:
      target: ${TARGET_ENV:-Target Environment}
      dockerfile: python_docker/Dockerfile
      context: .
      args:
        - POETRY_VERSION=${POETRY_VERSION:-1.1.10}
    expose:
      - "${APP_PORT:-8080}"
    volumes:
      - static_data:/app/staticfiles
    environment: *pythonEnv
    command: runserver
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: "${APP_HEALTHCHECK:-curl localhost:8080/api/ht/?format=json}"
      interval: "60s"
      timeout: "3s"
      start_period: "10s"
      retries: 3
  celery-beat:
    image: pkwarc/finotif-python-${TARGET_ENV:-Target Environment}
    environment: *pythonEnv
    command: celery-beat
    depends_on:
      - app
    restart: unless-stopped
  celery-worker:
    image: pkwarc/finotif-python-${TARGET_ENV:-Target Environment}
    environment: *pythonEnv
    command: celery-worker
    depends_on:
      - app
    restart: unless-stopped
  nginx:
    image: pkwarc/finotif-nginx-${TARGET_ENV:-Target Environment}
    build:
      context: .
      dockerfile: nginx/Dockerfile
    volumes:
      - static_data:/staticfiles
    ports:
      - "${NGINX_PORT:-8000}:${NGINX_PORT:-8000}"
    environment:
      - NGINX_PORT=${NGINX_PORT:-8000}
      - APP_PORT=${APP_PORT:-8080}
    depends_on:
      - app
    restart: unless-stopped

volumes:
  db_data:
    driver: local
  static_data:
    driver: local