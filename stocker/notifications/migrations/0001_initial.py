# Generated by Django 3.2.7 on 2021-11-29 00:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.CharField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required.', max_length=150, unique=True, validators=[django.core.validators.EmailValidator()], verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ('email',),
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('symbol', models.CharField(max_length=3, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('opens_at', models.TimeField()),
                ('closes_at', models.TimeField()),
                ('mic', models.TextField(help_text='Market Identifier Code', unique=True)),
            ],
            options={
                'ordering': ('mic',),
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('description', models.TextField()),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Ticker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('name', models.TextField()),
                ('description', models.TextField()),
                ('symbol', models.TextField(unique=True)),
                ('short_name', models.TextField()),
                ('exchange', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notifications.exchange')),
            ],
            options={
                'ordering': ('symbol',),
            },
        ),
        migrations.CreateModel(
            name='Tick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('value', models.FloatField()),
                ('property', models.IntegerField(choices=[(0, 'Price'), (1, 'Volume'), (2, 'Ask'), (3, 'Ask Size'), (4, 'Bid'), (5, 'Bid Size')])),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notifications.currency')),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notifications.ticker')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StepNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('type', models.IntegerField(choices=[(0, 'Email'), (1, 'Push')], default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('property', models.IntegerField(choices=[(0, 'Price'), (1, 'Volume'), (2, 'Ask'), (3, 'Ask Size'), (4, 'Bid'), (5, 'Bid Size')])),
                ('change', models.FloatField(help_text='Send the notification when a property of the ticker increased/decreased by the value of this field')),
                ('last_tick', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='notifications.tick')),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notifications.ticker')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='notifications.ticker')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IntervalNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('modified_at', models.DateTimeField(auto_now=True)),
                ('title', models.TextField()),
                ('content', models.TextField()),
                ('type', models.IntegerField(choices=[(0, 'Email'), (1, 'Push')], default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('property', models.IntegerField(choices=[(0, 'Price'), (1, 'Volume'), (2, 'Ask'), (3, 'Ask Size'), (4, 'Bid'), (5, 'Bid Size')])),
                ('interval', models.DurationField(help_text='Send a notification every [DD] [[HH:]MM:]ss[.uuuuuu] about the value of a property')),
                ('last_tick', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='notifications.tick')),
                ('ticker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='notifications.ticker')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
